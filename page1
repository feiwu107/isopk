function tt(e, t) {
            if (!e4(e))
                throw TypeError("Cannot update non-data-structure value: " + e);
            if (U(e)) {
                if (!e.remove)
                    throw TypeError("Cannot update immutable value without .remove() method: " + e);
                return e.remove(t)
            }
            if (!Y.call(e, t))
                return e;
            var a = te(e);
            return Array.isArray(a) ? a.splice(t, 1) : delete a[t],
            a
        }
        function ta(e, t, a) {
            if (!e4(e))
                throw TypeError("Cannot update non-data-structure value: " + e);
            if (U(e)) {
                if (!e.set)
                    throw TypeError("Cannot update immutable value without .set() method: " + e);
                return e.set(t, a)
            }
            if (Y.call(e, t) && a === e[t])
                return e;
            var r = te(e);
            return r[t] = a,
            r
        }
        function tr(e, t, a, r) {
            r || (r = a,
            a = void 0);
            var n = function e(t, a, r, n, i, c) {
                var f = a === l;
                if (n === r.length) {
                    var d = f ? i : a
                      , s = c(d);
                    return s === d ? a : s
                }
                if (!f && !e4(a))
                    throw TypeError("Cannot update within non-data-structure value in path [" + r.slice(0, n).map(e8) + "]: " + a);
                var o = r[n]
                  , u = f ? l : e9(a, o, l)
                  , b = e(u === l ? t : U(u), u, r, n + 1, i, c);
                return b === u ? a : b === l ? tt(a, o) : ta(f ? t ? tU() : {} : a, o, b)
            }(U(e), e, e6(t), 0, a, r);
            return n === l ? a : n
        }
        function tn(e, t, a) {
            return tr(e, t, l, function() {
                return a
            })
        }
        function ti(e, t) {
            return tn(this, e, t)
        }
        function tc(e, t) {
            return tr(e, t, function() {
                return l
            })
        }
        function tf(e) {
            return tc(this, e)
        }
        function td(e, t, a, r) {
            return tr(e, [t], a, r)
        }
        function ts(e, t, a) {
            return 1 == arguments.length ? e(this) : td(this, e, t, a)
        }
        function to(e, t, a) {
            return tr(this, e, t, a)
        }
        function tu() {
            for (var e = [], t = arguments.length; t--; )
                e[t] = arguments[t];
            return th(this, e)
        }
        function tb(e) {
            for (var t = [], a = arguments.length - 1; a-- > 0; )
                t[a] = arguments[a + 1];
            if ("function" != typeof e)
                throw TypeError("Invalid merger function: " + e);
            return th(this, t, e)
        }
        function th(e, t, a) {
            for (var r = [], n = 0; n < t.length; n++) {
                var i = P(t[n]);
                0 !== i.size && r.push(i)
            }
            return 0 === r.length ? e : 0 !== e.toSeq().size || e.__ownerID || 1 !== r.length ? e.withMutations(function(e) {
                for (var t = a ? function(t, r) {
                    td(e, r, l, function(e) {
                        return e === l ? t : a(e, t, r)
                    })
                }
                : function(t, a) {
                    e.set(a, t)
                }
                , n = 0; n < r.length; n++)
                    r[n].forEach(t)
            }) : e.constructor(r[0])
        }
